using MediatR;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;using Monotone.Services.Application.Queries;namespace Monotone.Controllers.User{    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]    [Route("api/v1/[controller]/[action]")]    [ApiController]    public class UserController : ControllerBase    {        private readonly IMediator _mediator;        public UserController(IMediator mediator)        {            _mediator = mediator;        }                [HttpGet]        public async Task<IActionResult> GetOnlineStatusForUser([FromQuery] string userId)        {            try            {            var result = await _mediator.Send(new GetOnlineStatusForUserQuery(userId));            if (result.IsT0)            {                return Ok(result.AsT0);            }            return BadRequest(result.AsT1.Message);            }            catch (Exception e)            {                return StatusCode(StatusCodes.Status500InternalServerError, e.Message);            }                    }                [HttpGet]        public async Task<IActionResult> SearchUserByUsername([FromQuery] string searchKey)        {            try            {                var result = await _mediator.Send(new SearchUserByUsernameQuery(searchKey));                if (result.IsT0)                {                    return Ok(result.AsT0);                }                return BadRequest(result.AsT1.Message);            }            catch (Exception e)            {                return StatusCode(StatusCodes.Status500InternalServerError, e.Message);            }                    }                [HttpGet]        public async Task<IActionResult> GetUserByUsername([FromQuery] string username)        {            try            {                var result = await _mediator.Send(new GetUserByUsernameQuery(username));                if (result.IsT0)                {                    return Ok(result.AsT0);                }                return BadRequest(result.AsT1.Message);            }            catch (Exception e)            {                return StatusCode(StatusCodes.Status500InternalServerError, e.Message);            }                    }    }}